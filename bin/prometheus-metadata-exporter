#!/usr/bin/env ruby
# coding: utf-8

require 'metadata/checker'
require 'metadata/saml/parser'
require 'metadata/saml/client'
require 'metadata/expiry/certificate_result'
require 'mixlib/cli' # pulled in implicitly by the sensu gem
require 'prometheus/middleware/exporter'
require 'sinatra/base'

# require 'pp'

class ExpiryDateMetric < Prometheus::Client::Gauge
  def initialize(metadata_url)
    super(:verify_federation_certificate_expiry, "The NotAfter date of the given X.509 SAML certificate")
    @metadata_url = metadata_url
    @metadata_client = Metadata::SAML::Client.new
    @parser = Metadata::SAML::Parser.new
    @certificate_factory = Metadata::Certificate::CertificateFactory.new
  end
  def values
    # we're being scraped, let's update the metrics
    document = @metadata_client.get(@metadata_url, false)
    certificate_identities = @parser.certificate_identities(document)
    #        puts certificate_identities
    certificate_identities.each { | pem, entity |
      #            puts "entity key_name: #{entity[0][:key_name]}"
      #            puts "entity entity_id: #{}"
      cert = @certificate_factory.from_inline_pem(pem)
      # puts "#{pp cert}"
      not_on_or_after = cert.not_after.to_time.to_i
      entity_id = entity.collect { |e| e[:entity_id] }.flatten
      use = entity[0][:key_use]
      serial = cert.serial
      set({entity_id: entity_id, key_use: use, serial: serial}, not_on_or_after)
    }
    #Â return the metrics to prometheus
    # @values[label_set_for(labels)] = value.to_f
    return super
  end
end

class PrometheusMetadataExporter
  include Mixlib::CLI

  option :host, :short => '-h HOST', required: true
  #  option :ca_file_list, :long => '--cas FILES', required: true
  option :signing_ca_file_list, :long => '--signing_cas FILES', required: false
  option :disable_hostname_verification,
         :short => '--disable-hostname-verification',
         boolean: true,
         default: false

  def gogogo
    #   ca_files = config[:ca_file_list].split(",")
    #    signing_ca_files = String(config[:signing_ca_file_list]).split(",")
    #    revocations = Metadata::Checker::check_ocsp(config[:host], ca_files, signing_ca_files, config[:disable_hostname_verification])

    # Metadata::Checker::check_expiry(config[:host],
    #                                                             config[:disable_hostname_verification],
    #                                                             config[:warning_threshold_days].to_i,
    #                                                             config[:critical_threshold_days].to_i)

    # ocsp - same but 0 (fail) or 1 (pass)

    Prometheus::Client::registry.register(ExpiryDateMetric.new(config[:host]))



  end
end

class App < Sinatra::Base
  use Prometheus::Middleware::Exporter

  set :port, 9199
  set :bind, '0.0.0.0'

  exporter = PrometheusMetadataExporter.new
  exporter.parse_options

  exporter.gogogo
  run! if app_file == $0
end


